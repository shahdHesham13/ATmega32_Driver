
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e68  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000e68  00000edc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000015a8  00000000  00000000  00000ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ba7  00000000  00000000  0000249c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 0d 07 	call	0xe1a	; 0xe1a <main>
  7a:	0c 94 32 07 	jmp	0xe64	; 0xe64 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuInit>:
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	19 82       	std	Y+1, r1	; 0x01
  8e:	ea e3       	ldi	r30, 0x3A	; 58
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	80 83       	st	Z, r24
  96:	e7 e3       	ldi	r30, 0x37	; 55
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	80 83       	st	Z, r24
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	86 e9       	ldi	r24, 0x96	; 150
  a4:	80 83       	st	Z, r24
  a6:	e1 e3       	ldi	r30, 0x31	; 49
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	86 e9       	ldi	r24, 0x96	; 150
  ac:	80 83       	st	Z, r24
  ae:	eb e3       	ldi	r30, 0x3B	; 59
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	89 83       	std	Y+1, r24	; 0x01
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	0f 90       	pop	r0
  bc:	cf 91       	pop	r28
  be:	df 91       	pop	r29
  c0:	08 95       	ret

000000c2 <DIO_enuSetPortDirection>:

	return Local_enuErrorstate;
}

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
  c2:	df 93       	push	r29
  c4:	cf 93       	push	r28
  c6:	00 d0       	rcall	.+0      	; 0xc8 <DIO_enuSetPortDirection+0x6>
  c8:	00 d0       	rcall	.+0      	; 0xca <DIO_enuSetPortDirection+0x8>
  ca:	0f 92       	push	r0
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	8a 83       	std	Y+2, r24	; 0x02
  d2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
  d4:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
  d6:	8a 81       	ldd	r24, Y+2	; 0x02
  d8:	84 30       	cpi	r24, 0x04	; 4
  da:	a8 f5       	brcc	.+106    	; 0x146 <DIO_enuSetPortDirection+0x84>
	{
		switch (Copy_u8PortID)
  dc:	8a 81       	ldd	r24, Y+2	; 0x02
  de:	28 2f       	mov	r18, r24
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	3d 83       	std	Y+5, r19	; 0x05
  e4:	2c 83       	std	Y+4, r18	; 0x04
  e6:	8c 81       	ldd	r24, Y+4	; 0x04
  e8:	9d 81       	ldd	r25, Y+5	; 0x05
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	91 05       	cpc	r25, r1
  ee:	d1 f0       	breq	.+52     	; 0x124 <DIO_enuSetPortDirection+0x62>
  f0:	2c 81       	ldd	r18, Y+4	; 0x04
  f2:	3d 81       	ldd	r19, Y+5	; 0x05
  f4:	22 30       	cpi	r18, 0x02	; 2
  f6:	31 05       	cpc	r19, r1
  f8:	2c f4       	brge	.+10     	; 0x104 <DIO_enuSetPortDirection+0x42>
  fa:	8c 81       	ldd	r24, Y+4	; 0x04
  fc:	9d 81       	ldd	r25, Y+5	; 0x05
  fe:	00 97       	sbiw	r24, 0x00	; 0
 100:	61 f0       	breq	.+24     	; 0x11a <DIO_enuSetPortDirection+0x58>
 102:	1e c0       	rjmp	.+60     	; 0x140 <DIO_enuSetPortDirection+0x7e>
 104:	2c 81       	ldd	r18, Y+4	; 0x04
 106:	3d 81       	ldd	r19, Y+5	; 0x05
 108:	22 30       	cpi	r18, 0x02	; 2
 10a:	31 05       	cpc	r19, r1
 10c:	81 f0       	breq	.+32     	; 0x12e <DIO_enuSetPortDirection+0x6c>
 10e:	8c 81       	ldd	r24, Y+4	; 0x04
 110:	9d 81       	ldd	r25, Y+5	; 0x05
 112:	83 30       	cpi	r24, 0x03	; 3
 114:	91 05       	cpc	r25, r1
 116:	81 f0       	breq	.+32     	; 0x138 <DIO_enuSetPortDirection+0x76>
 118:	13 c0       	rjmp	.+38     	; 0x140 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
 11a:	ea e3       	ldi	r30, 0x3A	; 58
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	80 83       	st	Z, r24
 122:	0e c0       	rjmp	.+28     	; 0x140 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
 124:	e7 e3       	ldi	r30, 0x37	; 55
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	8b 81       	ldd	r24, Y+3	; 0x03
 12a:	80 83       	st	Z, r24
 12c:	09 c0       	rjmp	.+18     	; 0x140 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
 12e:	e4 e3       	ldi	r30, 0x34	; 52
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	8b 81       	ldd	r24, Y+3	; 0x03
 134:	80 83       	st	Z, r24
 136:	04 c0       	rjmp	.+8      	; 0x140 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
 138:	e1 e3       	ldi	r30, 0x31	; 49
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	8b 81       	ldd	r24, Y+3	; 0x03
 13e:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	89 83       	std	Y+1, r24	; 0x01
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 14a:	89 81       	ldd	r24, Y+1	; 0x01
}
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	cf 91       	pop	r28
 158:	df 91       	pop	r29
 15a:	08 95       	ret

0000015c <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
 15c:	df 93       	push	r29
 15e:	cf 93       	push	r28
 160:	00 d0       	rcall	.+0      	; 0x162 <DIO_enuSetPortValue+0x6>
 162:	00 d0       	rcall	.+0      	; 0x164 <DIO_enuSetPortValue+0x8>
 164:	0f 92       	push	r0
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	8a 83       	std	Y+2, r24	; 0x02
 16c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
 16e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
 170:	8a 81       	ldd	r24, Y+2	; 0x02
 172:	84 30       	cpi	r24, 0x04	; 4
 174:	a8 f5       	brcc	.+106    	; 0x1e0 <DIO_enuSetPortValue+0x84>
	{
		switch (Copy_u8PortID)
 176:	8a 81       	ldd	r24, Y+2	; 0x02
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	3d 83       	std	Y+5, r19	; 0x05
 17e:	2c 83       	std	Y+4, r18	; 0x04
 180:	8c 81       	ldd	r24, Y+4	; 0x04
 182:	9d 81       	ldd	r25, Y+5	; 0x05
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	91 05       	cpc	r25, r1
 188:	d1 f0       	breq	.+52     	; 0x1be <DIO_enuSetPortValue+0x62>
 18a:	2c 81       	ldd	r18, Y+4	; 0x04
 18c:	3d 81       	ldd	r19, Y+5	; 0x05
 18e:	22 30       	cpi	r18, 0x02	; 2
 190:	31 05       	cpc	r19, r1
 192:	2c f4       	brge	.+10     	; 0x19e <DIO_enuSetPortValue+0x42>
 194:	8c 81       	ldd	r24, Y+4	; 0x04
 196:	9d 81       	ldd	r25, Y+5	; 0x05
 198:	00 97       	sbiw	r24, 0x00	; 0
 19a:	61 f0       	breq	.+24     	; 0x1b4 <DIO_enuSetPortValue+0x58>
 19c:	1e c0       	rjmp	.+60     	; 0x1da <DIO_enuSetPortValue+0x7e>
 19e:	2c 81       	ldd	r18, Y+4	; 0x04
 1a0:	3d 81       	ldd	r19, Y+5	; 0x05
 1a2:	22 30       	cpi	r18, 0x02	; 2
 1a4:	31 05       	cpc	r19, r1
 1a6:	81 f0       	breq	.+32     	; 0x1c8 <DIO_enuSetPortValue+0x6c>
 1a8:	8c 81       	ldd	r24, Y+4	; 0x04
 1aa:	9d 81       	ldd	r25, Y+5	; 0x05
 1ac:	83 30       	cpi	r24, 0x03	; 3
 1ae:	91 05       	cpc	r25, r1
 1b0:	81 f0       	breq	.+32     	; 0x1d2 <DIO_enuSetPortValue+0x76>
 1b2:	13 c0       	rjmp	.+38     	; 0x1da <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
 1b4:	eb e3       	ldi	r30, 0x3B	; 59
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ba:	80 83       	st	Z, r24
 1bc:	0e c0       	rjmp	.+28     	; 0x1da <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
 1be:	e8 e3       	ldi	r30, 0x38	; 56
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	8b 81       	ldd	r24, Y+3	; 0x03
 1c4:	80 83       	st	Z, r24
 1c6:	09 c0       	rjmp	.+18     	; 0x1da <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
 1c8:	e5 e3       	ldi	r30, 0x35	; 53
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	8b 81       	ldd	r24, Y+3	; 0x03
 1ce:	80 83       	st	Z, r24
 1d0:	04 c0       	rjmp	.+8      	; 0x1da <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
 1d2:	e2 e3       	ldi	r30, 0x32	; 50
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	8b 81       	ldd	r24, Y+3	; 0x03
 1d8:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	89 83       	std	Y+1, r24	; 0x01
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
}
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	cf 91       	pop	r28
 1f2:	df 91       	pop	r29
 1f4:	08 95       	ret

000001f6 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
 1f6:	df 93       	push	r29
 1f8:	cf 93       	push	r28
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <DIO_enuTogPortValue+0x6>
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <DIO_enuTogPortValue+0x8>
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
 204:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
 206:	8a 81       	ldd	r24, Y+2	; 0x02
 208:	84 30       	cpi	r24, 0x04	; 4
 20a:	08 f0       	brcs	.+2      	; 0x20e <DIO_enuTogPortValue+0x18>
 20c:	41 c0       	rjmp	.+130    	; 0x290 <DIO_enuTogPortValue+0x9a>
	{
		switch (Copy_u8PortID)
 20e:	8a 81       	ldd	r24, Y+2	; 0x02
 210:	28 2f       	mov	r18, r24
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	3c 83       	std	Y+4, r19	; 0x04
 216:	2b 83       	std	Y+3, r18	; 0x03
 218:	8b 81       	ldd	r24, Y+3	; 0x03
 21a:	9c 81       	ldd	r25, Y+4	; 0x04
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	91 05       	cpc	r25, r1
 220:	e9 f0       	breq	.+58     	; 0x25c <DIO_enuTogPortValue+0x66>
 222:	2b 81       	ldd	r18, Y+3	; 0x03
 224:	3c 81       	ldd	r19, Y+4	; 0x04
 226:	22 30       	cpi	r18, 0x02	; 2
 228:	31 05       	cpc	r19, r1
 22a:	2c f4       	brge	.+10     	; 0x236 <DIO_enuTogPortValue+0x40>
 22c:	8b 81       	ldd	r24, Y+3	; 0x03
 22e:	9c 81       	ldd	r25, Y+4	; 0x04
 230:	00 97       	sbiw	r24, 0x00	; 0
 232:	61 f0       	breq	.+24     	; 0x24c <DIO_enuTogPortValue+0x56>
 234:	2a c0       	rjmp	.+84     	; 0x28a <DIO_enuTogPortValue+0x94>
 236:	2b 81       	ldd	r18, Y+3	; 0x03
 238:	3c 81       	ldd	r19, Y+4	; 0x04
 23a:	22 30       	cpi	r18, 0x02	; 2
 23c:	31 05       	cpc	r19, r1
 23e:	b1 f0       	breq	.+44     	; 0x26c <DIO_enuTogPortValue+0x76>
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	9c 81       	ldd	r25, Y+4	; 0x04
 244:	83 30       	cpi	r24, 0x03	; 3
 246:	91 05       	cpc	r25, r1
 248:	c9 f0       	breq	.+50     	; 0x27c <DIO_enuTogPortValue+0x86>
 24a:	1f c0       	rjmp	.+62     	; 0x28a <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
 24c:	ab e3       	ldi	r26, 0x3B	; 59
 24e:	b0 e0       	ldi	r27, 0x00	; 0
 250:	eb e3       	ldi	r30, 0x3B	; 59
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	80 95       	com	r24
 258:	8c 93       	st	X, r24
 25a:	17 c0       	rjmp	.+46     	; 0x28a <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
 25c:	a8 e3       	ldi	r26, 0x38	; 56
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	e8 e3       	ldi	r30, 0x38	; 56
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	80 95       	com	r24
 268:	8c 93       	st	X, r24
 26a:	0f c0       	rjmp	.+30     	; 0x28a <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
 26c:	a5 e3       	ldi	r26, 0x35	; 53
 26e:	b0 e0       	ldi	r27, 0x00	; 0
 270:	e5 e3       	ldi	r30, 0x35	; 53
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	80 95       	com	r24
 278:	8c 93       	st	X, r24
 27a:	07 c0       	rjmp	.+14     	; 0x28a <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
 27c:	a2 e3       	ldi	r26, 0x32	; 50
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	e2 e3       	ldi	r30, 0x32	; 50
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	80 95       	com	r24
 288:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	89 83       	std	Y+1, r24	; 0x01
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 294:	89 81       	ldd	r24, Y+1	; 0x01
}
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	cf 91       	pop	r28
 2a0:	df 91       	pop	r29
 2a2:	08 95       	ret

000002a4 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_pu8Value)
{
 2a4:	df 93       	push	r29
 2a6:	cf 93       	push	r28
 2a8:	00 d0       	rcall	.+0      	; 0x2aa <DIO_enuGetPortValue+0x6>
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <DIO_enuGetPortValue+0x8>
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <DIO_enuGetPortValue+0xa>
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	8a 83       	std	Y+2, r24	; 0x02
 2b4:	7c 83       	std	Y+4, r23	; 0x04
 2b6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
 2b8:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
 2ba:	8b 81       	ldd	r24, Y+3	; 0x03
 2bc:	9c 81       	ldd	r25, Y+4	; 0x04
 2be:	00 97       	sbiw	r24, 0x00	; 0
 2c0:	09 f4       	brne	.+2      	; 0x2c4 <DIO_enuGetPortValue+0x20>
 2c2:	43 c0       	rjmp	.+134    	; 0x34a <DIO_enuGetPortValue+0xa6>
	{
		if (Copy_u8PortID <= DIO_PORTD)
 2c4:	8a 81       	ldd	r24, Y+2	; 0x02
 2c6:	84 30       	cpi	r24, 0x04	; 4
 2c8:	e8 f5       	brcc	.+122    	; 0x344 <DIO_enuGetPortValue+0xa0>
		{
			switch (Copy_u8PortID)
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	3e 83       	std	Y+6, r19	; 0x06
 2d2:	2d 83       	std	Y+5, r18	; 0x05
 2d4:	8d 81       	ldd	r24, Y+5	; 0x05
 2d6:	9e 81       	ldd	r25, Y+6	; 0x06
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	91 05       	cpc	r25, r1
 2dc:	e1 f0       	breq	.+56     	; 0x316 <DIO_enuGetPortValue+0x72>
 2de:	2d 81       	ldd	r18, Y+5	; 0x05
 2e0:	3e 81       	ldd	r19, Y+6	; 0x06
 2e2:	22 30       	cpi	r18, 0x02	; 2
 2e4:	31 05       	cpc	r19, r1
 2e6:	2c f4       	brge	.+10     	; 0x2f2 <DIO_enuGetPortValue+0x4e>
 2e8:	8d 81       	ldd	r24, Y+5	; 0x05
 2ea:	9e 81       	ldd	r25, Y+6	; 0x06
 2ec:	00 97       	sbiw	r24, 0x00	; 0
 2ee:	61 f0       	breq	.+24     	; 0x308 <DIO_enuGetPortValue+0x64>
 2f0:	26 c0       	rjmp	.+76     	; 0x33e <DIO_enuGetPortValue+0x9a>
 2f2:	2d 81       	ldd	r18, Y+5	; 0x05
 2f4:	3e 81       	ldd	r19, Y+6	; 0x06
 2f6:	22 30       	cpi	r18, 0x02	; 2
 2f8:	31 05       	cpc	r19, r1
 2fa:	a1 f0       	breq	.+40     	; 0x324 <DIO_enuGetPortValue+0x80>
 2fc:	8d 81       	ldd	r24, Y+5	; 0x05
 2fe:	9e 81       	ldd	r25, Y+6	; 0x06
 300:	83 30       	cpi	r24, 0x03	; 3
 302:	91 05       	cpc	r25, r1
 304:	b1 f0       	breq	.+44     	; 0x332 <DIO_enuGetPortValue+0x8e>
 306:	1b c0       	rjmp	.+54     	; 0x33e <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
 308:	e9 e3       	ldi	r30, 0x39	; 57
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	eb 81       	ldd	r30, Y+3	; 0x03
 310:	fc 81       	ldd	r31, Y+4	; 0x04
 312:	80 83       	st	Z, r24
 314:	14 c0       	rjmp	.+40     	; 0x33e <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
 316:	e6 e3       	ldi	r30, 0x36	; 54
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	eb 81       	ldd	r30, Y+3	; 0x03
 31e:	fc 81       	ldd	r31, Y+4	; 0x04
 320:	80 83       	st	Z, r24
 322:	0d c0       	rjmp	.+26     	; 0x33e <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
 324:	e3 e3       	ldi	r30, 0x33	; 51
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	eb 81       	ldd	r30, Y+3	; 0x03
 32c:	fc 81       	ldd	r31, Y+4	; 0x04
 32e:	80 83       	st	Z, r24
 330:	06 c0       	rjmp	.+12     	; 0x33e <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
 332:	e0 e3       	ldi	r30, 0x30	; 48
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	eb 81       	ldd	r30, Y+3	; 0x03
 33a:	fc 81       	ldd	r31, Y+4	; 0x04
 33c:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	89 83       	std	Y+1, r24	; 0x01
 342:	05 c0       	rjmp	.+10     	; 0x34e <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
 344:	83 e0       	ldi	r24, 0x03	; 3
 346:	89 83       	std	Y+1, r24	; 0x01
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 34e:	89 81       	ldd	r24, Y+1	; 0x01
}
 350:	26 96       	adiw	r28, 0x06	; 6
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	de bf       	out	0x3e, r29	; 62
 358:	0f be       	out	0x3f, r0	; 63
 35a:	cd bf       	out	0x3d, r28	; 61
 35c:	cf 91       	pop	r28
 35e:	df 91       	pop	r29
 360:	08 95       	ret

00000362 <DIO_enuSetPinDirection>:




ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
 362:	df 93       	push	r29
 364:	cf 93       	push	r28
 366:	00 d0       	rcall	.+0      	; 0x368 <DIO_enuSetPinDirection+0x6>
 368:	00 d0       	rcall	.+0      	; 0x36a <DIO_enuSetPinDirection+0x8>
 36a:	00 d0       	rcall	.+0      	; 0x36c <DIO_enuSetPinDirection+0xa>
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
 370:	8a 83       	std	Y+2, r24	; 0x02
 372:	6b 83       	std	Y+3, r22	; 0x03
 374:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
 376:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
 378:	8a 81       	ldd	r24, Y+2	; 0x02
 37a:	84 30       	cpi	r24, 0x04	; 4
 37c:	08 f0       	brcs	.+2      	; 0x380 <DIO_enuSetPinDirection+0x1e>
 37e:	d1 c0       	rjmp	.+418    	; 0x522 <DIO_enuSetPinDirection+0x1c0>
 380:	8b 81       	ldd	r24, Y+3	; 0x03
 382:	88 30       	cpi	r24, 0x08	; 8
 384:	08 f0       	brcs	.+2      	; 0x388 <DIO_enuSetPinDirection+0x26>
 386:	cd c0       	rjmp	.+410    	; 0x522 <DIO_enuSetPinDirection+0x1c0>
 388:	8c 81       	ldd	r24, Y+4	; 0x04
 38a:	82 30       	cpi	r24, 0x02	; 2
 38c:	08 f0       	brcs	.+2      	; 0x390 <DIO_enuSetPinDirection+0x2e>
 38e:	c9 c0       	rjmp	.+402    	; 0x522 <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
 390:	8a 81       	ldd	r24, Y+2	; 0x02
 392:	28 2f       	mov	r18, r24
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	3e 83       	std	Y+6, r19	; 0x06
 398:	2d 83       	std	Y+5, r18	; 0x05
 39a:	6d 81       	ldd	r22, Y+5	; 0x05
 39c:	7e 81       	ldd	r23, Y+6	; 0x06
 39e:	61 30       	cpi	r22, 0x01	; 1
 3a0:	71 05       	cpc	r23, r1
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <DIO_enuSetPinDirection+0x44>
 3a4:	41 c0       	rjmp	.+130    	; 0x428 <DIO_enuSetPinDirection+0xc6>
 3a6:	8d 81       	ldd	r24, Y+5	; 0x05
 3a8:	9e 81       	ldd	r25, Y+6	; 0x06
 3aa:	82 30       	cpi	r24, 0x02	; 2
 3ac:	91 05       	cpc	r25, r1
 3ae:	34 f4       	brge	.+12     	; 0x3bc <DIO_enuSetPinDirection+0x5a>
 3b0:	2d 81       	ldd	r18, Y+5	; 0x05
 3b2:	3e 81       	ldd	r19, Y+6	; 0x06
 3b4:	21 15       	cp	r18, r1
 3b6:	31 05       	cpc	r19, r1
 3b8:	71 f0       	breq	.+28     	; 0x3d6 <DIO_enuSetPinDirection+0x74>
 3ba:	b0 c0       	rjmp	.+352    	; 0x51c <DIO_enuSetPinDirection+0x1ba>
 3bc:	6d 81       	ldd	r22, Y+5	; 0x05
 3be:	7e 81       	ldd	r23, Y+6	; 0x06
 3c0:	62 30       	cpi	r22, 0x02	; 2
 3c2:	71 05       	cpc	r23, r1
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <DIO_enuSetPinDirection+0x66>
 3c6:	59 c0       	rjmp	.+178    	; 0x47a <DIO_enuSetPinDirection+0x118>
 3c8:	8d 81       	ldd	r24, Y+5	; 0x05
 3ca:	9e 81       	ldd	r25, Y+6	; 0x06
 3cc:	83 30       	cpi	r24, 0x03	; 3
 3ce:	91 05       	cpc	r25, r1
 3d0:	09 f4       	brne	.+2      	; 0x3d4 <DIO_enuSetPinDirection+0x72>
 3d2:	7c c0       	rjmp	.+248    	; 0x4cc <DIO_enuSetPinDirection+0x16a>
 3d4:	a3 c0       	rjmp	.+326    	; 0x51c <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 3d6:	aa e3       	ldi	r26, 0x3A	; 58
 3d8:	b0 e0       	ldi	r27, 0x00	; 0
 3da:	ea e3       	ldi	r30, 0x3A	; 58
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	48 2f       	mov	r20, r24
 3e2:	8b 81       	ldd	r24, Y+3	; 0x03
 3e4:	28 2f       	mov	r18, r24
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_enuSetPinDirection+0x90>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	2a 95       	dec	r18
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_enuSetPinDirection+0x8c>
 3f6:	80 95       	com	r24
 3f8:	84 23       	and	r24, r20
 3fa:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
 3fc:	aa e3       	ldi	r26, 0x3A	; 58
 3fe:	b0 e0       	ldi	r27, 0x00	; 0
 400:	ea e3       	ldi	r30, 0x3A	; 58
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	48 2f       	mov	r20, r24
 408:	8c 81       	ldd	r24, Y+4	; 0x04
 40a:	28 2f       	mov	r18, r24
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	8b 81       	ldd	r24, Y+3	; 0x03
 410:	88 2f       	mov	r24, r24
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	b9 01       	movw	r22, r18
 416:	02 c0       	rjmp	.+4      	; 0x41c <DIO_enuSetPinDirection+0xba>
 418:	66 0f       	add	r22, r22
 41a:	77 1f       	adc	r23, r23
 41c:	8a 95       	dec	r24
 41e:	e2 f7       	brpl	.-8      	; 0x418 <DIO_enuSetPinDirection+0xb6>
 420:	cb 01       	movw	r24, r22
 422:	84 2b       	or	r24, r20
 424:	8c 93       	st	X, r24
 426:	7a c0       	rjmp	.+244    	; 0x51c <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 428:	a7 e3       	ldi	r26, 0x37	; 55
 42a:	b0 e0       	ldi	r27, 0x00	; 0
 42c:	e7 e3       	ldi	r30, 0x37	; 55
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	48 2f       	mov	r20, r24
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	28 2f       	mov	r18, r24
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_enuSetPinDirection+0xe2>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	2a 95       	dec	r18
 446:	e2 f7       	brpl	.-8      	; 0x440 <DIO_enuSetPinDirection+0xde>
 448:	80 95       	com	r24
 44a:	84 23       	and	r24, r20
 44c:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
 44e:	a7 e3       	ldi	r26, 0x37	; 55
 450:	b0 e0       	ldi	r27, 0x00	; 0
 452:	e7 e3       	ldi	r30, 0x37	; 55
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	48 2f       	mov	r20, r24
 45a:	8c 81       	ldd	r24, Y+4	; 0x04
 45c:	28 2f       	mov	r18, r24
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	8b 81       	ldd	r24, Y+3	; 0x03
 462:	88 2f       	mov	r24, r24
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	b9 01       	movw	r22, r18
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_enuSetPinDirection+0x10c>
 46a:	66 0f       	add	r22, r22
 46c:	77 1f       	adc	r23, r23
 46e:	8a 95       	dec	r24
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_enuSetPinDirection+0x108>
 472:	cb 01       	movw	r24, r22
 474:	84 2b       	or	r24, r20
 476:	8c 93       	st	X, r24
 478:	51 c0       	rjmp	.+162    	; 0x51c <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 47a:	a4 e3       	ldi	r26, 0x34	; 52
 47c:	b0 e0       	ldi	r27, 0x00	; 0
 47e:	e4 e3       	ldi	r30, 0x34	; 52
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	48 2f       	mov	r20, r24
 486:	8b 81       	ldd	r24, Y+3	; 0x03
 488:	28 2f       	mov	r18, r24
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_enuSetPinDirection+0x134>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	2a 95       	dec	r18
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_enuSetPinDirection+0x130>
 49a:	80 95       	com	r24
 49c:	84 23       	and	r24, r20
 49e:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
 4a0:	a4 e3       	ldi	r26, 0x34	; 52
 4a2:	b0 e0       	ldi	r27, 0x00	; 0
 4a4:	e4 e3       	ldi	r30, 0x34	; 52
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	48 2f       	mov	r20, r24
 4ac:	8c 81       	ldd	r24, Y+4	; 0x04
 4ae:	28 2f       	mov	r18, r24
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	8b 81       	ldd	r24, Y+3	; 0x03
 4b4:	88 2f       	mov	r24, r24
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	b9 01       	movw	r22, r18
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_enuSetPinDirection+0x15e>
 4bc:	66 0f       	add	r22, r22
 4be:	77 1f       	adc	r23, r23
 4c0:	8a 95       	dec	r24
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_enuSetPinDirection+0x15a>
 4c4:	cb 01       	movw	r24, r22
 4c6:	84 2b       	or	r24, r20
 4c8:	8c 93       	st	X, r24
 4ca:	28 c0       	rjmp	.+80     	; 0x51c <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 4cc:	a1 e3       	ldi	r26, 0x31	; 49
 4ce:	b0 e0       	ldi	r27, 0x00	; 0
 4d0:	e1 e3       	ldi	r30, 0x31	; 49
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 81       	ld	r24, Z
 4d6:	48 2f       	mov	r20, r24
 4d8:	8b 81       	ldd	r24, Y+3	; 0x03
 4da:	28 2f       	mov	r18, r24
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_enuSetPinDirection+0x186>
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	2a 95       	dec	r18
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_enuSetPinDirection+0x182>
 4ec:	80 95       	com	r24
 4ee:	84 23       	and	r24, r20
 4f0:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
 4f2:	a1 e3       	ldi	r26, 0x31	; 49
 4f4:	b0 e0       	ldi	r27, 0x00	; 0
 4f6:	e1 e3       	ldi	r30, 0x31	; 49
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	80 81       	ld	r24, Z
 4fc:	48 2f       	mov	r20, r24
 4fe:	8c 81       	ldd	r24, Y+4	; 0x04
 500:	28 2f       	mov	r18, r24
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	8b 81       	ldd	r24, Y+3	; 0x03
 506:	88 2f       	mov	r24, r24
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	b9 01       	movw	r22, r18
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_enuSetPinDirection+0x1b0>
 50e:	66 0f       	add	r22, r22
 510:	77 1f       	adc	r23, r23
 512:	8a 95       	dec	r24
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_enuSetPinDirection+0x1ac>
 516:	cb 01       	movw	r24, r22
 518:	84 2b       	or	r24, r20
 51a:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	89 83       	std	Y+1, r24	; 0x01
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
 522:	83 e0       	ldi	r24, 0x03	; 3
 524:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 526:	89 81       	ldd	r24, Y+1	; 0x01
}
 528:	26 96       	adiw	r28, 0x06	; 6
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	f8 94       	cli
 52e:	de bf       	out	0x3e, r29	; 62
 530:	0f be       	out	0x3f, r0	; 63
 532:	cd bf       	out	0x3d, r28	; 61
 534:	cf 91       	pop	r28
 536:	df 91       	pop	r29
 538:	08 95       	ret

0000053a <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
 53a:	df 93       	push	r29
 53c:	cf 93       	push	r28
 53e:	00 d0       	rcall	.+0      	; 0x540 <DIO_enuSetPinValue+0x6>
 540:	00 d0       	rcall	.+0      	; 0x542 <DIO_enuSetPinValue+0x8>
 542:	00 d0       	rcall	.+0      	; 0x544 <DIO_enuSetPinValue+0xa>
 544:	cd b7       	in	r28, 0x3d	; 61
 546:	de b7       	in	r29, 0x3e	; 62
 548:	8a 83       	std	Y+2, r24	; 0x02
 54a:	6b 83       	std	Y+3, r22	; 0x03
 54c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
 54e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
 550:	8a 81       	ldd	r24, Y+2	; 0x02
 552:	84 30       	cpi	r24, 0x04	; 4
 554:	08 f0       	brcs	.+2      	; 0x558 <DIO_enuSetPinValue+0x1e>
 556:	d1 c0       	rjmp	.+418    	; 0x6fa <DIO_enuSetPinValue+0x1c0>
 558:	8b 81       	ldd	r24, Y+3	; 0x03
 55a:	88 30       	cpi	r24, 0x08	; 8
 55c:	08 f0       	brcs	.+2      	; 0x560 <DIO_enuSetPinValue+0x26>
 55e:	cd c0       	rjmp	.+410    	; 0x6fa <DIO_enuSetPinValue+0x1c0>
 560:	8c 81       	ldd	r24, Y+4	; 0x04
 562:	82 30       	cpi	r24, 0x02	; 2
 564:	08 f0       	brcs	.+2      	; 0x568 <DIO_enuSetPinValue+0x2e>
 566:	c9 c0       	rjmp	.+402    	; 0x6fa <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
 568:	8a 81       	ldd	r24, Y+2	; 0x02
 56a:	28 2f       	mov	r18, r24
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	3e 83       	std	Y+6, r19	; 0x06
 570:	2d 83       	std	Y+5, r18	; 0x05
 572:	6d 81       	ldd	r22, Y+5	; 0x05
 574:	7e 81       	ldd	r23, Y+6	; 0x06
 576:	61 30       	cpi	r22, 0x01	; 1
 578:	71 05       	cpc	r23, r1
 57a:	09 f4       	brne	.+2      	; 0x57e <DIO_enuSetPinValue+0x44>
 57c:	41 c0       	rjmp	.+130    	; 0x600 <DIO_enuSetPinValue+0xc6>
 57e:	8d 81       	ldd	r24, Y+5	; 0x05
 580:	9e 81       	ldd	r25, Y+6	; 0x06
 582:	82 30       	cpi	r24, 0x02	; 2
 584:	91 05       	cpc	r25, r1
 586:	34 f4       	brge	.+12     	; 0x594 <DIO_enuSetPinValue+0x5a>
 588:	2d 81       	ldd	r18, Y+5	; 0x05
 58a:	3e 81       	ldd	r19, Y+6	; 0x06
 58c:	21 15       	cp	r18, r1
 58e:	31 05       	cpc	r19, r1
 590:	71 f0       	breq	.+28     	; 0x5ae <DIO_enuSetPinValue+0x74>
 592:	b0 c0       	rjmp	.+352    	; 0x6f4 <DIO_enuSetPinValue+0x1ba>
 594:	6d 81       	ldd	r22, Y+5	; 0x05
 596:	7e 81       	ldd	r23, Y+6	; 0x06
 598:	62 30       	cpi	r22, 0x02	; 2
 59a:	71 05       	cpc	r23, r1
 59c:	09 f4       	brne	.+2      	; 0x5a0 <DIO_enuSetPinValue+0x66>
 59e:	59 c0       	rjmp	.+178    	; 0x652 <DIO_enuSetPinValue+0x118>
 5a0:	8d 81       	ldd	r24, Y+5	; 0x05
 5a2:	9e 81       	ldd	r25, Y+6	; 0x06
 5a4:	83 30       	cpi	r24, 0x03	; 3
 5a6:	91 05       	cpc	r25, r1
 5a8:	09 f4       	brne	.+2      	; 0x5ac <DIO_enuSetPinValue+0x72>
 5aa:	7c c0       	rjmp	.+248    	; 0x6a4 <DIO_enuSetPinValue+0x16a>
 5ac:	a3 c0       	rjmp	.+326    	; 0x6f4 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 5ae:	ab e3       	ldi	r26, 0x3B	; 59
 5b0:	b0 e0       	ldi	r27, 0x00	; 0
 5b2:	eb e3       	ldi	r30, 0x3B	; 59
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	48 2f       	mov	r20, r24
 5ba:	8b 81       	ldd	r24, Y+3	; 0x03
 5bc:	28 2f       	mov	r18, r24
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_enuSetPinValue+0x90>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	2a 95       	dec	r18
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_enuSetPinValue+0x8c>
 5ce:	80 95       	com	r24
 5d0:	84 23       	and	r24, r20
 5d2:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
 5d4:	ab e3       	ldi	r26, 0x3B	; 59
 5d6:	b0 e0       	ldi	r27, 0x00	; 0
 5d8:	eb e3       	ldi	r30, 0x3B	; 59
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	80 81       	ld	r24, Z
 5de:	48 2f       	mov	r20, r24
 5e0:	8c 81       	ldd	r24, Y+4	; 0x04
 5e2:	28 2f       	mov	r18, r24
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	8b 81       	ldd	r24, Y+3	; 0x03
 5e8:	88 2f       	mov	r24, r24
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	b9 01       	movw	r22, r18
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_enuSetPinValue+0xba>
 5f0:	66 0f       	add	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	8a 95       	dec	r24
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_enuSetPinValue+0xb6>
 5f8:	cb 01       	movw	r24, r22
 5fa:	84 2b       	or	r24, r20
 5fc:	8c 93       	st	X, r24
 5fe:	7a c0       	rjmp	.+244    	; 0x6f4 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 600:	a8 e3       	ldi	r26, 0x38	; 56
 602:	b0 e0       	ldi	r27, 0x00	; 0
 604:	e8 e3       	ldi	r30, 0x38	; 56
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	80 81       	ld	r24, Z
 60a:	48 2f       	mov	r20, r24
 60c:	8b 81       	ldd	r24, Y+3	; 0x03
 60e:	28 2f       	mov	r18, r24
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_enuSetPinValue+0xe2>
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	2a 95       	dec	r18
 61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_enuSetPinValue+0xde>
 620:	80 95       	com	r24
 622:	84 23       	and	r24, r20
 624:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
 626:	a8 e3       	ldi	r26, 0x38	; 56
 628:	b0 e0       	ldi	r27, 0x00	; 0
 62a:	e8 e3       	ldi	r30, 0x38	; 56
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	80 81       	ld	r24, Z
 630:	48 2f       	mov	r20, r24
 632:	8c 81       	ldd	r24, Y+4	; 0x04
 634:	28 2f       	mov	r18, r24
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	8b 81       	ldd	r24, Y+3	; 0x03
 63a:	88 2f       	mov	r24, r24
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	b9 01       	movw	r22, r18
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_enuSetPinValue+0x10c>
 642:	66 0f       	add	r22, r22
 644:	77 1f       	adc	r23, r23
 646:	8a 95       	dec	r24
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_enuSetPinValue+0x108>
 64a:	cb 01       	movw	r24, r22
 64c:	84 2b       	or	r24, r20
 64e:	8c 93       	st	X, r24
 650:	51 c0       	rjmp	.+162    	; 0x6f4 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 652:	a5 e3       	ldi	r26, 0x35	; 53
 654:	b0 e0       	ldi	r27, 0x00	; 0
 656:	e5 e3       	ldi	r30, 0x35	; 53
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	80 81       	ld	r24, Z
 65c:	48 2f       	mov	r20, r24
 65e:	8b 81       	ldd	r24, Y+3	; 0x03
 660:	28 2f       	mov	r18, r24
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_enuSetPinValue+0x134>
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	2a 95       	dec	r18
 670:	e2 f7       	brpl	.-8      	; 0x66a <DIO_enuSetPinValue+0x130>
 672:	80 95       	com	r24
 674:	84 23       	and	r24, r20
 676:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
 678:	a5 e3       	ldi	r26, 0x35	; 53
 67a:	b0 e0       	ldi	r27, 0x00	; 0
 67c:	e5 e3       	ldi	r30, 0x35	; 53
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	80 81       	ld	r24, Z
 682:	48 2f       	mov	r20, r24
 684:	8c 81       	ldd	r24, Y+4	; 0x04
 686:	28 2f       	mov	r18, r24
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	8b 81       	ldd	r24, Y+3	; 0x03
 68c:	88 2f       	mov	r24, r24
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	b9 01       	movw	r22, r18
 692:	02 c0       	rjmp	.+4      	; 0x698 <DIO_enuSetPinValue+0x15e>
 694:	66 0f       	add	r22, r22
 696:	77 1f       	adc	r23, r23
 698:	8a 95       	dec	r24
 69a:	e2 f7       	brpl	.-8      	; 0x694 <DIO_enuSetPinValue+0x15a>
 69c:	cb 01       	movw	r24, r22
 69e:	84 2b       	or	r24, r20
 6a0:	8c 93       	st	X, r24
 6a2:	28 c0       	rjmp	.+80     	; 0x6f4 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 6a4:	a2 e3       	ldi	r26, 0x32	; 50
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	e2 e3       	ldi	r30, 0x32	; 50
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	80 81       	ld	r24, Z
 6ae:	48 2f       	mov	r20, r24
 6b0:	8b 81       	ldd	r24, Y+3	; 0x03
 6b2:	28 2f       	mov	r18, r24
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <DIO_enuSetPinValue+0x186>
 6bc:	88 0f       	add	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	2a 95       	dec	r18
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <DIO_enuSetPinValue+0x182>
 6c4:	80 95       	com	r24
 6c6:	84 23       	and	r24, r20
 6c8:	8c 93       	st	X, r24

			PORTD |=  (Copy_u8Value << Copy_u8PinID);
 6ca:	a2 e3       	ldi	r26, 0x32	; 50
 6cc:	b0 e0       	ldi	r27, 0x00	; 0
 6ce:	e2 e3       	ldi	r30, 0x32	; 50
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	48 2f       	mov	r20, r24
 6d6:	8c 81       	ldd	r24, Y+4	; 0x04
 6d8:	28 2f       	mov	r18, r24
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	8b 81       	ldd	r24, Y+3	; 0x03
 6de:	88 2f       	mov	r24, r24
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	b9 01       	movw	r22, r18
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <DIO_enuSetPinValue+0x1b0>
 6e6:	66 0f       	add	r22, r22
 6e8:	77 1f       	adc	r23, r23
 6ea:	8a 95       	dec	r24
 6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <DIO_enuSetPinValue+0x1ac>
 6ee:	cb 01       	movw	r24, r22
 6f0:	84 2b       	or	r24, r20
 6f2:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	89 83       	std	Y+1, r24	; 0x01
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
 6fa:	83 e0       	ldi	r24, 0x03	; 3
 6fc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 6fe:	89 81       	ldd	r24, Y+1	; 0x01
}
 700:	26 96       	adiw	r28, 0x06	; 6
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	f8 94       	cli
 706:	de bf       	out	0x3e, r29	; 62
 708:	0f be       	out	0x3f, r0	; 63
 70a:	cd bf       	out	0x3d, r28	; 61
 70c:	cf 91       	pop	r28
 70e:	df 91       	pop	r29
 710:	08 95       	ret

00000712 <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID )
{
 712:	df 93       	push	r29
 714:	cf 93       	push	r28
 716:	00 d0       	rcall	.+0      	; 0x718 <DIO_enuTogPin+0x6>
 718:	00 d0       	rcall	.+0      	; 0x71a <DIO_enuTogPin+0x8>
 71a:	0f 92       	push	r0
 71c:	cd b7       	in	r28, 0x3d	; 61
 71e:	de b7       	in	r29, 0x3e	; 62
 720:	8a 83       	std	Y+2, r24	; 0x02
 722:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
 724:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
 726:	8a 81       	ldd	r24, Y+2	; 0x02
 728:	84 30       	cpi	r24, 0x04	; 4
 72a:	08 f0       	brcs	.+2      	; 0x72e <DIO_enuTogPin+0x1c>
 72c:	75 c0       	rjmp	.+234    	; 0x818 <DIO_enuTogPin+0x106>
 72e:	8b 81       	ldd	r24, Y+3	; 0x03
 730:	88 30       	cpi	r24, 0x08	; 8
 732:	08 f0       	brcs	.+2      	; 0x736 <DIO_enuTogPin+0x24>
 734:	71 c0       	rjmp	.+226    	; 0x818 <DIO_enuTogPin+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
 736:	8a 81       	ldd	r24, Y+2	; 0x02
 738:	28 2f       	mov	r18, r24
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	3d 83       	std	Y+5, r19	; 0x05
 73e:	2c 83       	std	Y+4, r18	; 0x04
 740:	8c 81       	ldd	r24, Y+4	; 0x04
 742:	9d 81       	ldd	r25, Y+5	; 0x05
 744:	81 30       	cpi	r24, 0x01	; 1
 746:	91 05       	cpc	r25, r1
 748:	49 f1       	breq	.+82     	; 0x79c <DIO_enuTogPin+0x8a>
 74a:	2c 81       	ldd	r18, Y+4	; 0x04
 74c:	3d 81       	ldd	r19, Y+5	; 0x05
 74e:	22 30       	cpi	r18, 0x02	; 2
 750:	31 05       	cpc	r19, r1
 752:	2c f4       	brge	.+10     	; 0x75e <DIO_enuTogPin+0x4c>
 754:	8c 81       	ldd	r24, Y+4	; 0x04
 756:	9d 81       	ldd	r25, Y+5	; 0x05
 758:	00 97       	sbiw	r24, 0x00	; 0
 75a:	61 f0       	breq	.+24     	; 0x774 <DIO_enuTogPin+0x62>
 75c:	5a c0       	rjmp	.+180    	; 0x812 <DIO_enuTogPin+0x100>
 75e:	2c 81       	ldd	r18, Y+4	; 0x04
 760:	3d 81       	ldd	r19, Y+5	; 0x05
 762:	22 30       	cpi	r18, 0x02	; 2
 764:	31 05       	cpc	r19, r1
 766:	71 f1       	breq	.+92     	; 0x7c4 <DIO_enuTogPin+0xb2>
 768:	8c 81       	ldd	r24, Y+4	; 0x04
 76a:	9d 81       	ldd	r25, Y+5	; 0x05
 76c:	83 30       	cpi	r24, 0x03	; 3
 76e:	91 05       	cpc	r25, r1
 770:	e9 f1       	breq	.+122    	; 0x7ec <DIO_enuTogPin+0xda>
 772:	4f c0       	rjmp	.+158    	; 0x812 <DIO_enuTogPin+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
 774:	ab e3       	ldi	r26, 0x3B	; 59
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	eb e3       	ldi	r30, 0x3B	; 59
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	48 2f       	mov	r20, r24
 780:	8b 81       	ldd	r24, Y+3	; 0x03
 782:	28 2f       	mov	r18, r24
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	02 2e       	mov	r0, r18
 78c:	02 c0       	rjmp	.+4      	; 0x792 <DIO_enuTogPin+0x80>
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	0a 94       	dec	r0
 794:	e2 f7       	brpl	.-8      	; 0x78e <DIO_enuTogPin+0x7c>
 796:	84 27       	eor	r24, r20
 798:	8c 93       	st	X, r24
 79a:	3b c0       	rjmp	.+118    	; 0x812 <DIO_enuTogPin+0x100>
			break;

		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
 79c:	a8 e3       	ldi	r26, 0x38	; 56
 79e:	b0 e0       	ldi	r27, 0x00	; 0
 7a0:	e8 e3       	ldi	r30, 0x38	; 56
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	80 81       	ld	r24, Z
 7a6:	48 2f       	mov	r20, r24
 7a8:	8b 81       	ldd	r24, Y+3	; 0x03
 7aa:	28 2f       	mov	r18, r24
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	02 2e       	mov	r0, r18
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <DIO_enuTogPin+0xa8>
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	0a 94       	dec	r0
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <DIO_enuTogPin+0xa4>
 7be:	84 27       	eor	r24, r20
 7c0:	8c 93       	st	X, r24
 7c2:	27 c0       	rjmp	.+78     	; 0x812 <DIO_enuTogPin+0x100>

			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
 7c4:	a5 e3       	ldi	r26, 0x35	; 53
 7c6:	b0 e0       	ldi	r27, 0x00	; 0
 7c8:	e5 e3       	ldi	r30, 0x35	; 53
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	80 81       	ld	r24, Z
 7ce:	48 2f       	mov	r20, r24
 7d0:	8b 81       	ldd	r24, Y+3	; 0x03
 7d2:	28 2f       	mov	r18, r24
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	02 2e       	mov	r0, r18
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <DIO_enuTogPin+0xd0>
 7de:	88 0f       	add	r24, r24
 7e0:	99 1f       	adc	r25, r25
 7e2:	0a 94       	dec	r0
 7e4:	e2 f7       	brpl	.-8      	; 0x7de <DIO_enuTogPin+0xcc>
 7e6:	84 27       	eor	r24, r20
 7e8:	8c 93       	st	X, r24
 7ea:	13 c0       	rjmp	.+38     	; 0x812 <DIO_enuTogPin+0x100>

			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
 7ec:	a2 e3       	ldi	r26, 0x32	; 50
 7ee:	b0 e0       	ldi	r27, 0x00	; 0
 7f0:	e2 e3       	ldi	r30, 0x32	; 50
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	80 81       	ld	r24, Z
 7f6:	48 2f       	mov	r20, r24
 7f8:	8b 81       	ldd	r24, Y+3	; 0x03
 7fa:	28 2f       	mov	r18, r24
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 2e       	mov	r0, r18
 804:	02 c0       	rjmp	.+4      	; 0x80a <DIO_enuTogPin+0xf8>
 806:	88 0f       	add	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	0a 94       	dec	r0
 80c:	e2 f7       	brpl	.-8      	; 0x806 <DIO_enuTogPin+0xf4>
 80e:	84 27       	eor	r24, r20
 810:	8c 93       	st	X, r24

			break;
		}
		Local_enuErrorstate = ES_OK;
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	89 83       	std	Y+1, r24	; 0x01
 816:	02 c0       	rjmp	.+4      	; 0x81c <DIO_enuTogPin+0x10a>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
 818:	83 e0       	ldi	r24, 0x03	; 3
 81a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 81c:	89 81       	ldd	r24, Y+1	; 0x01
}
 81e:	0f 90       	pop	r0
 820:	0f 90       	pop	r0
 822:	0f 90       	pop	r0
 824:	0f 90       	pop	r0
 826:	0f 90       	pop	r0
 828:	cf 91       	pop	r28
 82a:	df 91       	pop	r29
 82c:	08 95       	ret

0000082e <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
 82e:	df 93       	push	r29
 830:	cf 93       	push	r28
 832:	cd b7       	in	r28, 0x3d	; 61
 834:	de b7       	in	r29, 0x3e	; 62
 836:	27 97       	sbiw	r28, 0x07	; 7
 838:	0f b6       	in	r0, 0x3f	; 63
 83a:	f8 94       	cli
 83c:	de bf       	out	0x3e, r29	; 62
 83e:	0f be       	out	0x3f, r0	; 63
 840:	cd bf       	out	0x3d, r28	; 61
 842:	8a 83       	std	Y+2, r24	; 0x02
 844:	6b 83       	std	Y+3, r22	; 0x03
 846:	5d 83       	std	Y+5, r21	; 0x05
 848:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
 84a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
 84c:	8c 81       	ldd	r24, Y+4	; 0x04
 84e:	9d 81       	ldd	r25, Y+5	; 0x05
 850:	00 97       	sbiw	r24, 0x00	; 0
 852:	09 f4       	brne	.+2      	; 0x856 <DIO_enuGetPinValue+0x28>
 854:	7e c0       	rjmp	.+252    	; 0x952 <__stack+0xf3>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
 856:	8a 81       	ldd	r24, Y+2	; 0x02
 858:	84 30       	cpi	r24, 0x04	; 4
 85a:	08 f0       	brcs	.+2      	; 0x85e <DIO_enuGetPinValue+0x30>
 85c:	77 c0       	rjmp	.+238    	; 0x94c <__stack+0xed>
 85e:	8b 81       	ldd	r24, Y+3	; 0x03
 860:	88 30       	cpi	r24, 0x08	; 8
 862:	08 f0       	brcs	.+2      	; 0x866 <__stack+0x7>
 864:	73 c0       	rjmp	.+230    	; 0x94c <__stack+0xed>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
 866:	8a 81       	ldd	r24, Y+2	; 0x02
 868:	28 2f       	mov	r18, r24
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	3f 83       	std	Y+7, r19	; 0x07
 86e:	2e 83       	std	Y+6, r18	; 0x06
 870:	4e 81       	ldd	r20, Y+6	; 0x06
 872:	5f 81       	ldd	r21, Y+7	; 0x07
 874:	41 30       	cpi	r20, 0x01	; 1
 876:	51 05       	cpc	r21, r1
 878:	59 f1       	breq	.+86     	; 0x8d0 <__stack+0x71>
 87a:	8e 81       	ldd	r24, Y+6	; 0x06
 87c:	9f 81       	ldd	r25, Y+7	; 0x07
 87e:	82 30       	cpi	r24, 0x02	; 2
 880:	91 05       	cpc	r25, r1
 882:	34 f4       	brge	.+12     	; 0x890 <__stack+0x31>
 884:	2e 81       	ldd	r18, Y+6	; 0x06
 886:	3f 81       	ldd	r19, Y+7	; 0x07
 888:	21 15       	cp	r18, r1
 88a:	31 05       	cpc	r19, r1
 88c:	69 f0       	breq	.+26     	; 0x8a8 <__stack+0x49>
 88e:	5b c0       	rjmp	.+182    	; 0x946 <__stack+0xe7>
 890:	4e 81       	ldd	r20, Y+6	; 0x06
 892:	5f 81       	ldd	r21, Y+7	; 0x07
 894:	42 30       	cpi	r20, 0x02	; 2
 896:	51 05       	cpc	r21, r1
 898:	79 f1       	breq	.+94     	; 0x8f8 <__stack+0x99>
 89a:	8e 81       	ldd	r24, Y+6	; 0x06
 89c:	9f 81       	ldd	r25, Y+7	; 0x07
 89e:	83 30       	cpi	r24, 0x03	; 3
 8a0:	91 05       	cpc	r25, r1
 8a2:	09 f4       	brne	.+2      	; 0x8a6 <__stack+0x47>
 8a4:	3d c0       	rjmp	.+122    	; 0x920 <__stack+0xc1>
 8a6:	4f c0       	rjmp	.+158    	; 0x946 <__stack+0xe7>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
 8a8:	e9 e3       	ldi	r30, 0x39	; 57
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	80 81       	ld	r24, Z
 8ae:	28 2f       	mov	r18, r24
 8b0:	30 e0       	ldi	r19, 0x00	; 0
 8b2:	8b 81       	ldd	r24, Y+3	; 0x03
 8b4:	88 2f       	mov	r24, r24
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	a9 01       	movw	r20, r18
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <__stack+0x61>
 8bc:	55 95       	asr	r21
 8be:	47 95       	ror	r20
 8c0:	8a 95       	dec	r24
 8c2:	e2 f7       	brpl	.-8      	; 0x8bc <__stack+0x5d>
 8c4:	ca 01       	movw	r24, r20
 8c6:	81 70       	andi	r24, 0x01	; 1
 8c8:	ec 81       	ldd	r30, Y+4	; 0x04
 8ca:	fd 81       	ldd	r31, Y+5	; 0x05
 8cc:	80 83       	st	Z, r24
 8ce:	3b c0       	rjmp	.+118    	; 0x946 <__stack+0xe7>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
 8d0:	e6 e3       	ldi	r30, 0x36	; 54
 8d2:	f0 e0       	ldi	r31, 0x00	; 0
 8d4:	80 81       	ld	r24, Z
 8d6:	28 2f       	mov	r18, r24
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	8b 81       	ldd	r24, Y+3	; 0x03
 8dc:	88 2f       	mov	r24, r24
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	a9 01       	movw	r20, r18
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <__stack+0x89>
 8e4:	55 95       	asr	r21
 8e6:	47 95       	ror	r20
 8e8:	8a 95       	dec	r24
 8ea:	e2 f7       	brpl	.-8      	; 0x8e4 <__stack+0x85>
 8ec:	ca 01       	movw	r24, r20
 8ee:	81 70       	andi	r24, 0x01	; 1
 8f0:	ec 81       	ldd	r30, Y+4	; 0x04
 8f2:	fd 81       	ldd	r31, Y+5	; 0x05
 8f4:	80 83       	st	Z, r24
 8f6:	27 c0       	rjmp	.+78     	; 0x946 <__stack+0xe7>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
 8f8:	e3 e3       	ldi	r30, 0x33	; 51
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	80 81       	ld	r24, Z
 8fe:	28 2f       	mov	r18, r24
 900:	30 e0       	ldi	r19, 0x00	; 0
 902:	8b 81       	ldd	r24, Y+3	; 0x03
 904:	88 2f       	mov	r24, r24
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	a9 01       	movw	r20, r18
 90a:	02 c0       	rjmp	.+4      	; 0x910 <__stack+0xb1>
 90c:	55 95       	asr	r21
 90e:	47 95       	ror	r20
 910:	8a 95       	dec	r24
 912:	e2 f7       	brpl	.-8      	; 0x90c <__stack+0xad>
 914:	ca 01       	movw	r24, r20
 916:	81 70       	andi	r24, 0x01	; 1
 918:	ec 81       	ldd	r30, Y+4	; 0x04
 91a:	fd 81       	ldd	r31, Y+5	; 0x05
 91c:	80 83       	st	Z, r24
 91e:	13 c0       	rjmp	.+38     	; 0x946 <__stack+0xe7>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
 920:	e0 e3       	ldi	r30, 0x30	; 48
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	80 81       	ld	r24, Z
 926:	28 2f       	mov	r18, r24
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	8b 81       	ldd	r24, Y+3	; 0x03
 92c:	88 2f       	mov	r24, r24
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	a9 01       	movw	r20, r18
 932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0xd9>
 934:	55 95       	asr	r21
 936:	47 95       	ror	r20
 938:	8a 95       	dec	r24
 93a:	e2 f7       	brpl	.-8      	; 0x934 <__stack+0xd5>
 93c:	ca 01       	movw	r24, r20
 93e:	81 70       	andi	r24, 0x01	; 1
 940:	ec 81       	ldd	r30, Y+4	; 0x04
 942:	fd 81       	ldd	r31, Y+5	; 0x05
 944:	80 83       	st	Z, r24
				break;

			}
			Local_enuErrorstate = ES_OK;
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	89 83       	std	Y+1, r24	; 0x01
 94a:	05 c0       	rjmp	.+10     	; 0x956 <__stack+0xf7>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
 94c:	83 e0       	ldi	r24, 0x03	; 3
 94e:	89 83       	std	Y+1, r24	; 0x01
 950:	02 c0       	rjmp	.+4      	; 0x956 <__stack+0xf7>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
 952:	82 e0       	ldi	r24, 0x02	; 2
 954:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 956:	89 81       	ldd	r24, Y+1	; 0x01
}
 958:	27 96       	adiw	r28, 0x07	; 7
 95a:	0f b6       	in	r0, 0x3f	; 63
 95c:	f8 94       	cli
 95e:	de bf       	out	0x3e, r29	; 62
 960:	0f be       	out	0x3f, r0	; 63
 962:	cd bf       	out	0x3d, r28	; 61
 964:	cf 91       	pop	r28
 966:	df 91       	pop	r29
 968:	08 95       	ret

0000096a <LED_enuInit>:
#include "LED_config.h"

#include "DIO_int.h"

ES_t LED_enuInit(LED_t * Copy_pstrLedConfig)
{
 96a:	df 93       	push	r29
 96c:	cf 93       	push	r28
 96e:	00 d0       	rcall	.+0      	; 0x970 <LED_enuInit+0x6>
 970:	00 d0       	rcall	.+0      	; 0x972 <LED_enuInit+0x8>
 972:	0f 92       	push	r0
 974:	cd b7       	in	r28, 0x3d	; 61
 976:	de b7       	in	r29, 0x3e	; 62
 978:	9c 83       	std	Y+4, r25	; 0x04
 97a:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 97c:	1a 82       	std	Y+2, r1	; 0x02

	if (Copy_pstrLedConfig != NULL)
 97e:	8b 81       	ldd	r24, Y+3	; 0x03
 980:	9c 81       	ldd	r25, Y+4	; 0x04
 982:	00 97       	sbiw	r24, 0x00	; 0
 984:	09 f4       	brne	.+2      	; 0x988 <LED_enuInit+0x1e>
 986:	24 c1       	rjmp	.+584    	; 0xbd0 <LED_enuInit+0x266>
	{
		u8 Local_enuIterator=0;
 988:	19 82       	std	Y+1, r1	; 0x01
		for (Local_enuIterator=0; Local_enuIterator < LED_NUM ; Local_enuIterator++)
 98a:	19 82       	std	Y+1, r1	; 0x01
 98c:	1c c1       	rjmp	.+568    	; 0xbc6 <LED_enuInit+0x25c>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8OUTPUT );
 98e:	89 81       	ldd	r24, Y+1	; 0x01
 990:	88 2f       	mov	r24, r24
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	9c 01       	movw	r18, r24
 996:	22 0f       	add	r18, r18
 998:	33 1f       	adc	r19, r19
 99a:	22 0f       	add	r18, r18
 99c:	33 1f       	adc	r19, r19
 99e:	8b 81       	ldd	r24, Y+3	; 0x03
 9a0:	9c 81       	ldd	r25, Y+4	; 0x04
 9a2:	fc 01       	movw	r30, r24
 9a4:	e2 0f       	add	r30, r18
 9a6:	f3 1f       	adc	r31, r19
 9a8:	40 81       	ld	r20, Z
 9aa:	89 81       	ldd	r24, Y+1	; 0x01
 9ac:	88 2f       	mov	r24, r24
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	9c 01       	movw	r18, r24
 9b2:	22 0f       	add	r18, r18
 9b4:	33 1f       	adc	r19, r19
 9b6:	22 0f       	add	r18, r18
 9b8:	33 1f       	adc	r19, r19
 9ba:	8b 81       	ldd	r24, Y+3	; 0x03
 9bc:	9c 81       	ldd	r25, Y+4	; 0x04
 9be:	fc 01       	movw	r30, r24
 9c0:	e2 0f       	add	r30, r18
 9c2:	f3 1f       	adc	r31, r19
 9c4:	91 81       	ldd	r25, Z+1	; 0x01
 9c6:	84 2f       	mov	r24, r20
 9c8:	69 2f       	mov	r22, r25
 9ca:	41 e0       	ldi	r20, 0x01	; 1
 9cc:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_enuSetPinDirection>
 9d0:	8a 83       	std	Y+2, r24	; 0x02
			if (Copy_pstrLedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
 9d2:	89 81       	ldd	r24, Y+1	; 0x01
 9d4:	88 2f       	mov	r24, r24
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	9c 01       	movw	r18, r24
 9da:	22 0f       	add	r18, r18
 9dc:	33 1f       	adc	r19, r19
 9de:	22 0f       	add	r18, r18
 9e0:	33 1f       	adc	r19, r19
 9e2:	8b 81       	ldd	r24, Y+3	; 0x03
 9e4:	9c 81       	ldd	r25, Y+4	; 0x04
 9e6:	fc 01       	movw	r30, r24
 9e8:	e2 0f       	add	r30, r18
 9ea:	f3 1f       	adc	r31, r19
 9ec:	82 81       	ldd	r24, Z+2	; 0x02
 9ee:	83 30       	cpi	r24, 0x03	; 3
 9f0:	09 f0       	breq	.+2      	; 0x9f4 <LED_enuInit+0x8a>
 9f2:	69 c0       	rjmp	.+210    	; 0xac6 <LED_enuInit+0x15c>
			{
				if (Copy_pstrLedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
 9f4:	89 81       	ldd	r24, Y+1	; 0x01
 9f6:	88 2f       	mov	r24, r24
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	9c 01       	movw	r18, r24
 9fc:	22 0f       	add	r18, r18
 9fe:	33 1f       	adc	r19, r19
 a00:	22 0f       	add	r18, r18
 a02:	33 1f       	adc	r19, r19
 a04:	8b 81       	ldd	r24, Y+3	; 0x03
 a06:	9c 81       	ldd	r25, Y+4	; 0x04
 a08:	fc 01       	movw	r30, r24
 a0a:	e2 0f       	add	r30, r18
 a0c:	f3 1f       	adc	r31, r19
 a0e:	83 81       	ldd	r24, Z+3	; 0x03
 a10:	8d 30       	cpi	r24, 0x0D	; 13
 a12:	19 f5       	brne	.+70     	; 0xa5a <LED_enuInit+0xf0>
				{
					Local_enuErrorState =DIO_enuSetPinValue(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8LOW);
 a14:	89 81       	ldd	r24, Y+1	; 0x01
 a16:	88 2f       	mov	r24, r24
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	9c 01       	movw	r18, r24
 a1c:	22 0f       	add	r18, r18
 a1e:	33 1f       	adc	r19, r19
 a20:	22 0f       	add	r18, r18
 a22:	33 1f       	adc	r19, r19
 a24:	8b 81       	ldd	r24, Y+3	; 0x03
 a26:	9c 81       	ldd	r25, Y+4	; 0x04
 a28:	fc 01       	movw	r30, r24
 a2a:	e2 0f       	add	r30, r18
 a2c:	f3 1f       	adc	r31, r19
 a2e:	40 81       	ld	r20, Z
 a30:	89 81       	ldd	r24, Y+1	; 0x01
 a32:	88 2f       	mov	r24, r24
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	9c 01       	movw	r18, r24
 a38:	22 0f       	add	r18, r18
 a3a:	33 1f       	adc	r19, r19
 a3c:	22 0f       	add	r18, r18
 a3e:	33 1f       	adc	r19, r19
 a40:	8b 81       	ldd	r24, Y+3	; 0x03
 a42:	9c 81       	ldd	r25, Y+4	; 0x04
 a44:	fc 01       	movw	r30, r24
 a46:	e2 0f       	add	r30, r18
 a48:	f3 1f       	adc	r31, r19
 a4a:	91 81       	ldd	r25, Z+1	; 0x01
 a4c:	84 2f       	mov	r24, r20
 a4e:	69 2f       	mov	r22, r25
 a50:	40 e0       	ldi	r20, 0x00	; 0
 a52:	0e 94 9d 02 	call	0x53a	; 0x53a <DIO_enuSetPinValue>
 a56:	8a 83       	std	Y+2, r24	; 0x02
 a58:	b3 c0       	rjmp	.+358    	; 0xbc0 <LED_enuInit+0x256>
				}
				else if(Copy_pstrLedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
 a5a:	89 81       	ldd	r24, Y+1	; 0x01
 a5c:	88 2f       	mov	r24, r24
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	9c 01       	movw	r18, r24
 a62:	22 0f       	add	r18, r18
 a64:	33 1f       	adc	r19, r19
 a66:	22 0f       	add	r18, r18
 a68:	33 1f       	adc	r19, r19
 a6a:	8b 81       	ldd	r24, Y+3	; 0x03
 a6c:	9c 81       	ldd	r25, Y+4	; 0x04
 a6e:	fc 01       	movw	r30, r24
 a70:	e2 0f       	add	r30, r18
 a72:	f3 1f       	adc	r31, r19
 a74:	83 81       	ldd	r24, Z+3	; 0x03
 a76:	81 31       	cpi	r24, 0x11	; 17
 a78:	19 f5       	brne	.+70     	; 0xac0 <LED_enuInit+0x156>
				{
					Local_enuErrorState =DIO_enuSetPinValue(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8HIGH);
 a7a:	89 81       	ldd	r24, Y+1	; 0x01
 a7c:	88 2f       	mov	r24, r24
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	9c 01       	movw	r18, r24
 a82:	22 0f       	add	r18, r18
 a84:	33 1f       	adc	r19, r19
 a86:	22 0f       	add	r18, r18
 a88:	33 1f       	adc	r19, r19
 a8a:	8b 81       	ldd	r24, Y+3	; 0x03
 a8c:	9c 81       	ldd	r25, Y+4	; 0x04
 a8e:	fc 01       	movw	r30, r24
 a90:	e2 0f       	add	r30, r18
 a92:	f3 1f       	adc	r31, r19
 a94:	40 81       	ld	r20, Z
 a96:	89 81       	ldd	r24, Y+1	; 0x01
 a98:	88 2f       	mov	r24, r24
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	9c 01       	movw	r18, r24
 a9e:	22 0f       	add	r18, r18
 aa0:	33 1f       	adc	r19, r19
 aa2:	22 0f       	add	r18, r18
 aa4:	33 1f       	adc	r19, r19
 aa6:	8b 81       	ldd	r24, Y+3	; 0x03
 aa8:	9c 81       	ldd	r25, Y+4	; 0x04
 aaa:	fc 01       	movw	r30, r24
 aac:	e2 0f       	add	r30, r18
 aae:	f3 1f       	adc	r31, r19
 ab0:	91 81       	ldd	r25, Z+1	; 0x01
 ab2:	84 2f       	mov	r24, r20
 ab4:	69 2f       	mov	r22, r25
 ab6:	41 e0       	ldi	r20, 0x01	; 1
 ab8:	0e 94 9d 02 	call	0x53a	; 0x53a <DIO_enuSetPinValue>
 abc:	8a 83       	std	Y+2, r24	; 0x02
 abe:	80 c0       	rjmp	.+256    	; 0xbc0 <LED_enuInit+0x256>
				}
				else
				{
					return ES_OUT_OF_RANGE;
 ac0:	83 e0       	ldi	r24, 0x03	; 3
 ac2:	8d 83       	std	Y+5, r24	; 0x05
 ac4:	89 c0       	rjmp	.+274    	; 0xbd8 <LED_enuInit+0x26e>
				}
			}
			else if (Copy_pstrLedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
 ac6:	89 81       	ldd	r24, Y+1	; 0x01
 ac8:	88 2f       	mov	r24, r24
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	9c 01       	movw	r18, r24
 ace:	22 0f       	add	r18, r18
 ad0:	33 1f       	adc	r19, r19
 ad2:	22 0f       	add	r18, r18
 ad4:	33 1f       	adc	r19, r19
 ad6:	8b 81       	ldd	r24, Y+3	; 0x03
 ad8:	9c 81       	ldd	r25, Y+4	; 0x04
 ada:	fc 01       	movw	r30, r24
 adc:	e2 0f       	add	r30, r18
 ade:	f3 1f       	adc	r31, r19
 ae0:	82 81       	ldd	r24, Z+2	; 0x02
 ae2:	87 30       	cpi	r24, 0x07	; 7
 ae4:	09 f0       	breq	.+2      	; 0xae8 <LED_enuInit+0x17e>
 ae6:	69 c0       	rjmp	.+210    	; 0xbba <LED_enuInit+0x250>
			{
				if (Copy_pstrLedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
 ae8:	89 81       	ldd	r24, Y+1	; 0x01
 aea:	88 2f       	mov	r24, r24
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	9c 01       	movw	r18, r24
 af0:	22 0f       	add	r18, r18
 af2:	33 1f       	adc	r19, r19
 af4:	22 0f       	add	r18, r18
 af6:	33 1f       	adc	r19, r19
 af8:	8b 81       	ldd	r24, Y+3	; 0x03
 afa:	9c 81       	ldd	r25, Y+4	; 0x04
 afc:	fc 01       	movw	r30, r24
 afe:	e2 0f       	add	r30, r18
 b00:	f3 1f       	adc	r31, r19
 b02:	83 81       	ldd	r24, Z+3	; 0x03
 b04:	8d 30       	cpi	r24, 0x0D	; 13
 b06:	19 f5       	brne	.+70     	; 0xb4e <LED_enuInit+0x1e4>
				{
					Local_enuErrorState =DIO_enuSetPinValue(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8HIGH);
 b08:	89 81       	ldd	r24, Y+1	; 0x01
 b0a:	88 2f       	mov	r24, r24
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	9c 01       	movw	r18, r24
 b10:	22 0f       	add	r18, r18
 b12:	33 1f       	adc	r19, r19
 b14:	22 0f       	add	r18, r18
 b16:	33 1f       	adc	r19, r19
 b18:	8b 81       	ldd	r24, Y+3	; 0x03
 b1a:	9c 81       	ldd	r25, Y+4	; 0x04
 b1c:	fc 01       	movw	r30, r24
 b1e:	e2 0f       	add	r30, r18
 b20:	f3 1f       	adc	r31, r19
 b22:	40 81       	ld	r20, Z
 b24:	89 81       	ldd	r24, Y+1	; 0x01
 b26:	88 2f       	mov	r24, r24
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	9c 01       	movw	r18, r24
 b2c:	22 0f       	add	r18, r18
 b2e:	33 1f       	adc	r19, r19
 b30:	22 0f       	add	r18, r18
 b32:	33 1f       	adc	r19, r19
 b34:	8b 81       	ldd	r24, Y+3	; 0x03
 b36:	9c 81       	ldd	r25, Y+4	; 0x04
 b38:	fc 01       	movw	r30, r24
 b3a:	e2 0f       	add	r30, r18
 b3c:	f3 1f       	adc	r31, r19
 b3e:	91 81       	ldd	r25, Z+1	; 0x01
 b40:	84 2f       	mov	r24, r20
 b42:	69 2f       	mov	r22, r25
 b44:	41 e0       	ldi	r20, 0x01	; 1
 b46:	0e 94 9d 02 	call	0x53a	; 0x53a <DIO_enuSetPinValue>
 b4a:	8a 83       	std	Y+2, r24	; 0x02
 b4c:	39 c0       	rjmp	.+114    	; 0xbc0 <LED_enuInit+0x256>
				}
				else if(Copy_pstrLedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
 b4e:	89 81       	ldd	r24, Y+1	; 0x01
 b50:	88 2f       	mov	r24, r24
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	9c 01       	movw	r18, r24
 b56:	22 0f       	add	r18, r18
 b58:	33 1f       	adc	r19, r19
 b5a:	22 0f       	add	r18, r18
 b5c:	33 1f       	adc	r19, r19
 b5e:	8b 81       	ldd	r24, Y+3	; 0x03
 b60:	9c 81       	ldd	r25, Y+4	; 0x04
 b62:	fc 01       	movw	r30, r24
 b64:	e2 0f       	add	r30, r18
 b66:	f3 1f       	adc	r31, r19
 b68:	83 81       	ldd	r24, Z+3	; 0x03
 b6a:	81 31       	cpi	r24, 0x11	; 17
 b6c:	19 f5       	brne	.+70     	; 0xbb4 <LED_enuInit+0x24a>
				{
					Local_enuErrorState =DIO_enuSetPinValue(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8LOW);
 b6e:	89 81       	ldd	r24, Y+1	; 0x01
 b70:	88 2f       	mov	r24, r24
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	9c 01       	movw	r18, r24
 b76:	22 0f       	add	r18, r18
 b78:	33 1f       	adc	r19, r19
 b7a:	22 0f       	add	r18, r18
 b7c:	33 1f       	adc	r19, r19
 b7e:	8b 81       	ldd	r24, Y+3	; 0x03
 b80:	9c 81       	ldd	r25, Y+4	; 0x04
 b82:	fc 01       	movw	r30, r24
 b84:	e2 0f       	add	r30, r18
 b86:	f3 1f       	adc	r31, r19
 b88:	40 81       	ld	r20, Z
 b8a:	89 81       	ldd	r24, Y+1	; 0x01
 b8c:	88 2f       	mov	r24, r24
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	9c 01       	movw	r18, r24
 b92:	22 0f       	add	r18, r18
 b94:	33 1f       	adc	r19, r19
 b96:	22 0f       	add	r18, r18
 b98:	33 1f       	adc	r19, r19
 b9a:	8b 81       	ldd	r24, Y+3	; 0x03
 b9c:	9c 81       	ldd	r25, Y+4	; 0x04
 b9e:	fc 01       	movw	r30, r24
 ba0:	e2 0f       	add	r30, r18
 ba2:	f3 1f       	adc	r31, r19
 ba4:	91 81       	ldd	r25, Z+1	; 0x01
 ba6:	84 2f       	mov	r24, r20
 ba8:	69 2f       	mov	r22, r25
 baa:	40 e0       	ldi	r20, 0x00	; 0
 bac:	0e 94 9d 02 	call	0x53a	; 0x53a <DIO_enuSetPinValue>
 bb0:	8a 83       	std	Y+2, r24	; 0x02
 bb2:	06 c0       	rjmp	.+12     	; 0xbc0 <LED_enuInit+0x256>
				}
				else
				{
					return ES_OUT_OF_RANGE;
 bb4:	83 e0       	ldi	r24, 0x03	; 3
 bb6:	8d 83       	std	Y+5, r24	; 0x05
 bb8:	0f c0       	rjmp	.+30     	; 0xbd8 <LED_enuInit+0x26e>
				}
			}
			else
			{
				return ES_OUT_OF_RANGE;
 bba:	83 e0       	ldi	r24, 0x03	; 3
 bbc:	8d 83       	std	Y+5, r24	; 0x05
 bbe:	0c c0       	rjmp	.+24     	; 0xbd8 <LED_enuInit+0x26e>
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_pstrLedConfig != NULL)
	{
		u8 Local_enuIterator=0;
		for (Local_enuIterator=0; Local_enuIterator < LED_NUM ; Local_enuIterator++)
 bc0:	89 81       	ldd	r24, Y+1	; 0x01
 bc2:	8f 5f       	subi	r24, 0xFF	; 255
 bc4:	89 83       	std	Y+1, r24	; 0x01
 bc6:	89 81       	ldd	r24, Y+1	; 0x01
 bc8:	83 30       	cpi	r24, 0x03	; 3
 bca:	08 f4       	brcc	.+2      	; 0xbce <LED_enuInit+0x264>
 bcc:	e0 ce       	rjmp	.-576    	; 0x98e <LED_enuInit+0x24>
 bce:	02 c0       	rjmp	.+4      	; 0xbd4 <LED_enuInit+0x26a>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 bd0:	82 e0       	ldi	r24, 0x02	; 2
 bd2:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
 bd4:	8a 81       	ldd	r24, Y+2	; 0x02
 bd6:	8d 83       	std	Y+5, r24	; 0x05
 bd8:	8d 81       	ldd	r24, Y+5	; 0x05
}
 bda:	0f 90       	pop	r0
 bdc:	0f 90       	pop	r0
 bde:	0f 90       	pop	r0
 be0:	0f 90       	pop	r0
 be2:	0f 90       	pop	r0
 be4:	cf 91       	pop	r28
 be6:	df 91       	pop	r29
 be8:	08 95       	ret

00000bea <LED_enuTurnON>:

ES_t LED_enuTurnON(LED_t * Copy_pstrLedID)
{
 bea:	df 93       	push	r29
 bec:	cf 93       	push	r28
 bee:	00 d0       	rcall	.+0      	; 0xbf0 <LED_enuTurnON+0x6>
 bf0:	0f 92       	push	r0
 bf2:	cd b7       	in	r28, 0x3d	; 61
 bf4:	de b7       	in	r29, 0x3e	; 62
 bf6:	9b 83       	std	Y+3, r25	; 0x03
 bf8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
 bfa:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pstrLedID != NULL)
 bfc:	8a 81       	ldd	r24, Y+2	; 0x02
 bfe:	9b 81       	ldd	r25, Y+3	; 0x03
 c00:	00 97       	sbiw	r24, 0x00	; 0
 c02:	29 f1       	breq	.+74     	; 0xc4e <LED_enuTurnON+0x64>
	{
		if (Copy_pstrLedID->LED_u8Connection == LED_SINK )
 c04:	ea 81       	ldd	r30, Y+2	; 0x02
 c06:	fb 81       	ldd	r31, Y+3	; 0x03
 c08:	82 81       	ldd	r24, Z+2	; 0x02
 c0a:	83 30       	cpi	r24, 0x03	; 3
 c0c:	61 f4       	brne	.+24     	; 0xc26 <LED_enuTurnON+0x3c>
		{
			Local_enuErrorState=DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID,DIO_u8LOW);
 c0e:	ea 81       	ldd	r30, Y+2	; 0x02
 c10:	fb 81       	ldd	r31, Y+3	; 0x03
 c12:	80 81       	ld	r24, Z
 c14:	ea 81       	ldd	r30, Y+2	; 0x02
 c16:	fb 81       	ldd	r31, Y+3	; 0x03
 c18:	91 81       	ldd	r25, Z+1	; 0x01
 c1a:	69 2f       	mov	r22, r25
 c1c:	40 e0       	ldi	r20, 0x00	; 0
 c1e:	0e 94 9d 02 	call	0x53a	; 0x53a <DIO_enuSetPinValue>
 c22:	89 83       	std	Y+1, r24	; 0x01
 c24:	16 c0       	rjmp	.+44     	; 0xc52 <LED_enuTurnON+0x68>
		}
		else if (Copy_pstrLedID->LED_u8Connection == LED_SOURCE)
 c26:	ea 81       	ldd	r30, Y+2	; 0x02
 c28:	fb 81       	ldd	r31, Y+3	; 0x03
 c2a:	82 81       	ldd	r24, Z+2	; 0x02
 c2c:	87 30       	cpi	r24, 0x07	; 7
 c2e:	61 f4       	brne	.+24     	; 0xc48 <LED_enuTurnON+0x5e>
		{
			Local_enuErrorState=DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID,DIO_u8HIGH);
 c30:	ea 81       	ldd	r30, Y+2	; 0x02
 c32:	fb 81       	ldd	r31, Y+3	; 0x03
 c34:	80 81       	ld	r24, Z
 c36:	ea 81       	ldd	r30, Y+2	; 0x02
 c38:	fb 81       	ldd	r31, Y+3	; 0x03
 c3a:	91 81       	ldd	r25, Z+1	; 0x01
 c3c:	69 2f       	mov	r22, r25
 c3e:	41 e0       	ldi	r20, 0x01	; 1
 c40:	0e 94 9d 02 	call	0x53a	; 0x53a <DIO_enuSetPinValue>
 c44:	89 83       	std	Y+1, r24	; 0x01
 c46:	05 c0       	rjmp	.+10     	; 0xc52 <LED_enuTurnON+0x68>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 c48:	83 e0       	ldi	r24, 0x03	; 3
 c4a:	89 83       	std	Y+1, r24	; 0x01
 c4c:	02 c0       	rjmp	.+4      	; 0xc52 <LED_enuTurnON+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
 c4e:	82 e0       	ldi	r24, 0x02	; 2
 c50:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 c52:	89 81       	ldd	r24, Y+1	; 0x01
}
 c54:	0f 90       	pop	r0
 c56:	0f 90       	pop	r0
 c58:	0f 90       	pop	r0
 c5a:	cf 91       	pop	r28
 c5c:	df 91       	pop	r29
 c5e:	08 95       	ret

00000c60 <LED_enuTurnOFF>:

ES_t LED_enuTurnOFF(LED_t * Copy_pstrLedID)
{
 c60:	df 93       	push	r29
 c62:	cf 93       	push	r28
 c64:	00 d0       	rcall	.+0      	; 0xc66 <LED_enuTurnOFF+0x6>
 c66:	0f 92       	push	r0
 c68:	cd b7       	in	r28, 0x3d	; 61
 c6a:	de b7       	in	r29, 0x3e	; 62
 c6c:	9b 83       	std	Y+3, r25	; 0x03
 c6e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
 c70:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pstrLedID != NULL)
 c72:	8a 81       	ldd	r24, Y+2	; 0x02
 c74:	9b 81       	ldd	r25, Y+3	; 0x03
 c76:	00 97       	sbiw	r24, 0x00	; 0
 c78:	29 f1       	breq	.+74     	; 0xcc4 <LED_enuTurnOFF+0x64>
	{
		if (Copy_pstrLedID->LED_u8Connection == LED_SINK )
 c7a:	ea 81       	ldd	r30, Y+2	; 0x02
 c7c:	fb 81       	ldd	r31, Y+3	; 0x03
 c7e:	82 81       	ldd	r24, Z+2	; 0x02
 c80:	83 30       	cpi	r24, 0x03	; 3
 c82:	61 f4       	brne	.+24     	; 0xc9c <LED_enuTurnOFF+0x3c>
		{
			Local_enuErrorState=DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID,DIO_u8HIGH);
 c84:	ea 81       	ldd	r30, Y+2	; 0x02
 c86:	fb 81       	ldd	r31, Y+3	; 0x03
 c88:	80 81       	ld	r24, Z
 c8a:	ea 81       	ldd	r30, Y+2	; 0x02
 c8c:	fb 81       	ldd	r31, Y+3	; 0x03
 c8e:	91 81       	ldd	r25, Z+1	; 0x01
 c90:	69 2f       	mov	r22, r25
 c92:	41 e0       	ldi	r20, 0x01	; 1
 c94:	0e 94 9d 02 	call	0x53a	; 0x53a <DIO_enuSetPinValue>
 c98:	89 83       	std	Y+1, r24	; 0x01
 c9a:	16 c0       	rjmp	.+44     	; 0xcc8 <LED_enuTurnOFF+0x68>
		}
		else if (Copy_pstrLedID->LED_u8Connection == LED_SOURCE)
 c9c:	ea 81       	ldd	r30, Y+2	; 0x02
 c9e:	fb 81       	ldd	r31, Y+3	; 0x03
 ca0:	82 81       	ldd	r24, Z+2	; 0x02
 ca2:	87 30       	cpi	r24, 0x07	; 7
 ca4:	61 f4       	brne	.+24     	; 0xcbe <LED_enuTurnOFF+0x5e>
		{
			Local_enuErrorState=DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID,DIO_u8LOW);
 ca6:	ea 81       	ldd	r30, Y+2	; 0x02
 ca8:	fb 81       	ldd	r31, Y+3	; 0x03
 caa:	80 81       	ld	r24, Z
 cac:	ea 81       	ldd	r30, Y+2	; 0x02
 cae:	fb 81       	ldd	r31, Y+3	; 0x03
 cb0:	91 81       	ldd	r25, Z+1	; 0x01
 cb2:	69 2f       	mov	r22, r25
 cb4:	40 e0       	ldi	r20, 0x00	; 0
 cb6:	0e 94 9d 02 	call	0x53a	; 0x53a <DIO_enuSetPinValue>
 cba:	89 83       	std	Y+1, r24	; 0x01
 cbc:	05 c0       	rjmp	.+10     	; 0xcc8 <LED_enuTurnOFF+0x68>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 cbe:	83 e0       	ldi	r24, 0x03	; 3
 cc0:	89 83       	std	Y+1, r24	; 0x01
 cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <LED_enuTurnOFF+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
 cc4:	82 e0       	ldi	r24, 0x02	; 2
 cc6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 cc8:	89 81       	ldd	r24, Y+1	; 0x01
}
 cca:	0f 90       	pop	r0
 ccc:	0f 90       	pop	r0
 cce:	0f 90       	pop	r0
 cd0:	cf 91       	pop	r28
 cd2:	df 91       	pop	r29
 cd4:	08 95       	ret

00000cd6 <Switch_enuInit>:
#include "Switch_config.h"

#include "DIO_int.h"

ES_t Switch_enuInit(SW_t * Copy_AstrSwitchs)
{
 cd6:	df 93       	push	r29
 cd8:	cf 93       	push	r28
 cda:	00 d0       	rcall	.+0      	; 0xcdc <Switch_enuInit+0x6>
 cdc:	00 d0       	rcall	.+0      	; 0xcde <Switch_enuInit+0x8>
 cde:	cd b7       	in	r28, 0x3d	; 61
 ce0:	de b7       	in	r29, 0x3e	; 62
 ce2:	9c 83       	std	Y+4, r25	; 0x04
 ce4:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 ce6:	1a 82       	std	Y+2, r1	; 0x02

	if (Copy_AstrSwitchs != NULL)
 ce8:	8b 81       	ldd	r24, Y+3	; 0x03
 cea:	9c 81       	ldd	r25, Y+4	; 0x04
 cec:	00 97       	sbiw	r24, 0x00	; 0
 cee:	09 f4       	brne	.+2      	; 0xcf2 <Switch_enuInit+0x1c>
 cf0:	5d c0       	rjmp	.+186    	; 0xdac <Switch_enuInit+0xd6>
	{
		u8 Local_u8Iterator =0;
 cf2:	19 82       	std	Y+1, r1	; 0x01
		for (Local_u8Iterator=0; Local_u8Iterator < SW_NUM ; Local_u8Iterator++)
 cf4:	19 82       	std	Y+1, r1	; 0x01
 cf6:	55 c0       	rjmp	.+170    	; 0xda2 <Switch_enuInit+0xcc>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_AstrSwitchs[Local_u8Iterator].SW_PortID ,Copy_AstrSwitchs[Local_u8Iterator].SW_PinID, DIO_u8INPUT);
 cf8:	89 81       	ldd	r24, Y+1	; 0x01
 cfa:	28 2f       	mov	r18, r24
 cfc:	30 e0       	ldi	r19, 0x00	; 0
 cfe:	c9 01       	movw	r24, r18
 d00:	88 0f       	add	r24, r24
 d02:	99 1f       	adc	r25, r25
 d04:	28 0f       	add	r18, r24
 d06:	39 1f       	adc	r19, r25
 d08:	8b 81       	ldd	r24, Y+3	; 0x03
 d0a:	9c 81       	ldd	r25, Y+4	; 0x04
 d0c:	fc 01       	movw	r30, r24
 d0e:	e2 0f       	add	r30, r18
 d10:	f3 1f       	adc	r31, r19
 d12:	40 81       	ld	r20, Z
 d14:	89 81       	ldd	r24, Y+1	; 0x01
 d16:	28 2f       	mov	r18, r24
 d18:	30 e0       	ldi	r19, 0x00	; 0
 d1a:	c9 01       	movw	r24, r18
 d1c:	88 0f       	add	r24, r24
 d1e:	99 1f       	adc	r25, r25
 d20:	28 0f       	add	r18, r24
 d22:	39 1f       	adc	r19, r25
 d24:	8b 81       	ldd	r24, Y+3	; 0x03
 d26:	9c 81       	ldd	r25, Y+4	; 0x04
 d28:	fc 01       	movw	r30, r24
 d2a:	e2 0f       	add	r30, r18
 d2c:	f3 1f       	adc	r31, r19
 d2e:	91 81       	ldd	r25, Z+1	; 0x01
 d30:	84 2f       	mov	r24, r20
 d32:	69 2f       	mov	r22, r25
 d34:	40 e0       	ldi	r20, 0x00	; 0
 d36:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_enuSetPinDirection>
 d3a:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrSwitchs[Local_u8Iterator].SW_PortID ,Copy_AstrSwitchs[Local_u8Iterator].SW_PinID,Copy_AstrSwitchs[Local_u8Iterator].SW_Status);
 d3c:	89 81       	ldd	r24, Y+1	; 0x01
 d3e:	28 2f       	mov	r18, r24
 d40:	30 e0       	ldi	r19, 0x00	; 0
 d42:	c9 01       	movw	r24, r18
 d44:	88 0f       	add	r24, r24
 d46:	99 1f       	adc	r25, r25
 d48:	28 0f       	add	r18, r24
 d4a:	39 1f       	adc	r19, r25
 d4c:	8b 81       	ldd	r24, Y+3	; 0x03
 d4e:	9c 81       	ldd	r25, Y+4	; 0x04
 d50:	fc 01       	movw	r30, r24
 d52:	e2 0f       	add	r30, r18
 d54:	f3 1f       	adc	r31, r19
 d56:	50 81       	ld	r21, Z
 d58:	89 81       	ldd	r24, Y+1	; 0x01
 d5a:	28 2f       	mov	r18, r24
 d5c:	30 e0       	ldi	r19, 0x00	; 0
 d5e:	c9 01       	movw	r24, r18
 d60:	88 0f       	add	r24, r24
 d62:	99 1f       	adc	r25, r25
 d64:	28 0f       	add	r18, r24
 d66:	39 1f       	adc	r19, r25
 d68:	8b 81       	ldd	r24, Y+3	; 0x03
 d6a:	9c 81       	ldd	r25, Y+4	; 0x04
 d6c:	fc 01       	movw	r30, r24
 d6e:	e2 0f       	add	r30, r18
 d70:	f3 1f       	adc	r31, r19
 d72:	41 81       	ldd	r20, Z+1	; 0x01
 d74:	89 81       	ldd	r24, Y+1	; 0x01
 d76:	28 2f       	mov	r18, r24
 d78:	30 e0       	ldi	r19, 0x00	; 0
 d7a:	c9 01       	movw	r24, r18
 d7c:	88 0f       	add	r24, r24
 d7e:	99 1f       	adc	r25, r25
 d80:	28 0f       	add	r18, r24
 d82:	39 1f       	adc	r19, r25
 d84:	8b 81       	ldd	r24, Y+3	; 0x03
 d86:	9c 81       	ldd	r25, Y+4	; 0x04
 d88:	fc 01       	movw	r30, r24
 d8a:	e2 0f       	add	r30, r18
 d8c:	f3 1f       	adc	r31, r19
 d8e:	92 81       	ldd	r25, Z+2	; 0x02
 d90:	85 2f       	mov	r24, r21
 d92:	64 2f       	mov	r22, r20
 d94:	49 2f       	mov	r20, r25
 d96:	0e 94 9d 02 	call	0x53a	; 0x53a <DIO_enuSetPinValue>
 d9a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_AstrSwitchs != NULL)
	{
		u8 Local_u8Iterator =0;
		for (Local_u8Iterator=0; Local_u8Iterator < SW_NUM ; Local_u8Iterator++)
 d9c:	89 81       	ldd	r24, Y+1	; 0x01
 d9e:	8f 5f       	subi	r24, 0xFF	; 255
 da0:	89 83       	std	Y+1, r24	; 0x01
 da2:	89 81       	ldd	r24, Y+1	; 0x01
 da4:	83 30       	cpi	r24, 0x03	; 3
 da6:	08 f4       	brcc	.+2      	; 0xdaa <Switch_enuInit+0xd4>
 da8:	a7 cf       	rjmp	.-178    	; 0xcf8 <Switch_enuInit+0x22>
 daa:	02 c0       	rjmp	.+4      	; 0xdb0 <Switch_enuInit+0xda>
			Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrSwitchs[Local_u8Iterator].SW_PortID ,Copy_AstrSwitchs[Local_u8Iterator].SW_PinID,Copy_AstrSwitchs[Local_u8Iterator].SW_Status);
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 dac:	82 e0       	ldi	r24, 0x02	; 2
 dae:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
 db0:	8a 81       	ldd	r24, Y+2	; 0x02
}
 db2:	0f 90       	pop	r0
 db4:	0f 90       	pop	r0
 db6:	0f 90       	pop	r0
 db8:	0f 90       	pop	r0
 dba:	cf 91       	pop	r28
 dbc:	df 91       	pop	r29
 dbe:	08 95       	ret

00000dc0 <Switch_enuGetState>:

ES_t Switch_enuGetState(SW_t * Copy_AstrSwitchs, u8 * Copy_pu8SwState)
{
 dc0:	df 93       	push	r29
 dc2:	cf 93       	push	r28
 dc4:	00 d0       	rcall	.+0      	; 0xdc6 <Switch_enuGetState+0x6>
 dc6:	00 d0       	rcall	.+0      	; 0xdc8 <Switch_enuGetState+0x8>
 dc8:	0f 92       	push	r0
 dca:	cd b7       	in	r28, 0x3d	; 61
 dcc:	de b7       	in	r29, 0x3e	; 62
 dce:	9b 83       	std	Y+3, r25	; 0x03
 dd0:	8a 83       	std	Y+2, r24	; 0x02
 dd2:	7d 83       	std	Y+5, r23	; 0x05
 dd4:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 dd6:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_AstrSwitchs != NULL && Copy_pu8SwState != NULL)
 dd8:	8a 81       	ldd	r24, Y+2	; 0x02
 dda:	9b 81       	ldd	r25, Y+3	; 0x03
 ddc:	00 97       	sbiw	r24, 0x00	; 0
 dde:	91 f0       	breq	.+36     	; 0xe04 <Switch_enuGetState+0x44>
 de0:	8c 81       	ldd	r24, Y+4	; 0x04
 de2:	9d 81       	ldd	r25, Y+5	; 0x05
 de4:	00 97       	sbiw	r24, 0x00	; 0
 de6:	71 f0       	breq	.+28     	; 0xe04 <Switch_enuGetState+0x44>
	{
		Local_enuErrorState = DIO_enuGetPinValue(Copy_AstrSwitchs->SW_PortID, Copy_AstrSwitchs->SW_PinID, Copy_pu8SwState);
 de8:	ea 81       	ldd	r30, Y+2	; 0x02
 dea:	fb 81       	ldd	r31, Y+3	; 0x03
 dec:	80 81       	ld	r24, Z
 dee:	ea 81       	ldd	r30, Y+2	; 0x02
 df0:	fb 81       	ldd	r31, Y+3	; 0x03
 df2:	91 81       	ldd	r25, Z+1	; 0x01
 df4:	2c 81       	ldd	r18, Y+4	; 0x04
 df6:	3d 81       	ldd	r19, Y+5	; 0x05
 df8:	69 2f       	mov	r22, r25
 dfa:	a9 01       	movw	r20, r18
 dfc:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_enuGetPinValue>
 e00:	89 83       	std	Y+1, r24	; 0x01
 e02:	02 c0       	rjmp	.+4      	; 0xe08 <Switch_enuGetState+0x48>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 e04:	82 e0       	ldi	r24, 0x02	; 2
 e06:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 e08:	89 81       	ldd	r24, Y+1	; 0x01
}
 e0a:	0f 90       	pop	r0
 e0c:	0f 90       	pop	r0
 e0e:	0f 90       	pop	r0
 e10:	0f 90       	pop	r0
 e12:	0f 90       	pop	r0
 e14:	cf 91       	pop	r28
 e16:	df 91       	pop	r29
 e18:	08 95       	ret

00000e1a <main>:
extern LED_t LED_AstrLedConfig [LED_NUM];

extern SW_t Switch_AstrSwitchState [SW_NUM];

int main(void)
{
 e1a:	df 93       	push	r29
 e1c:	cf 93       	push	r28
 e1e:	0f 92       	push	r0
 e20:	cd b7       	in	r28, 0x3d	; 61
 e22:	de b7       	in	r29, 0x3e	; 62
	DIO_enuInit();
 e24:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuInit>
	LED_enuInit(LED_AstrLedConfig);
 e28:	80 e6       	ldi	r24, 0x60	; 96
 e2a:	90 e0       	ldi	r25, 0x00	; 0
 e2c:	0e 94 b5 04 	call	0x96a	; 0x96a <LED_enuInit>
	Switch_enuInit(Switch_AstrSwitchState);
 e30:	8c e6       	ldi	r24, 0x6C	; 108
 e32:	90 e0       	ldi	r25, 0x00	; 0
 e34:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <Switch_enuInit>
	u8 pinstate=0;
 e38:	19 82       	std	Y+1, r1	; 0x01
	while (1)
	{
		Switch_enuGetState(&Switch_AstrSwitchState[1] , &pinstate);
 e3a:	8f e6       	ldi	r24, 0x6F	; 111
 e3c:	90 e0       	ldi	r25, 0x00	; 0
 e3e:	9e 01       	movw	r18, r28
 e40:	2f 5f       	subi	r18, 0xFF	; 255
 e42:	3f 4f       	sbci	r19, 0xFF	; 255
 e44:	b9 01       	movw	r22, r18
 e46:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <Switch_enuGetState>
				if (pinstate==0)
 e4a:	89 81       	ldd	r24, Y+1	; 0x01
 e4c:	88 23       	and	r24, r24
 e4e:	29 f4       	brne	.+10     	; 0xe5a <main+0x40>
					LED_enuTurnON(&LED_AstrLedConfig[1]);
 e50:	84 e6       	ldi	r24, 0x64	; 100
 e52:	90 e0       	ldi	r25, 0x00	; 0
 e54:	0e 94 f5 05 	call	0xbea	; 0xbea <LED_enuTurnON>
 e58:	f0 cf       	rjmp	.-32     	; 0xe3a <main+0x20>
				else
					LED_enuTurnOFF(&LED_AstrLedConfig[1]);
 e5a:	84 e6       	ldi	r24, 0x64	; 100
 e5c:	90 e0       	ldi	r25, 0x00	; 0
 e5e:	0e 94 30 06 	call	0xc60	; 0xc60 <LED_enuTurnOFF>
 e62:	eb cf       	rjmp	.-42     	; 0xe3a <main+0x20>

00000e64 <_exit>:
 e64:	f8 94       	cli

00000e66 <__stop_program>:
 e66:	ff cf       	rjmp	.-2      	; 0xe66 <__stop_program>
